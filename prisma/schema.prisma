generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Highlight {
  id            String         @id @default(uuid())
  bookId        String         @db.VarChar(255)
  content       String
  location      String         @db.VarChar(255)
  addedAt       DateTime       @db.Timestamp(6)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookTitle     String         @db.VarChar(255)
  page          Int
  userId        String         @db.VarChar(255)
  bookAuthor    String         @db.VarChar(255)
  isFavorite    Boolean        @default(false)
  book          Book           @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  highlightTags HighlightTag[]
  notes         Note[]
  subHighlights SubHighlight[]

  @@index([bookId], map: "highlight_book_idx")
  @@index([userId], map: "highlight_user_idx")
}

model Note {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  highlightId String
  highlight   Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)

  @@index([highlightId])
}

model SubHighlight {
  id          String    @id @default(uuid())
  startIndex  Int
  endIndex    Int
  createdAt   DateTime  @default(now())
  highlightId String
  highlight   Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)

  @@index([highlightId])
}

model Tag {
  id            String         @id @default(uuid())
  name          String         @unique
  createdAt     DateTime       @default(now())
  highlightTags HighlightTag[]
}

model HighlightTag {
  highlightId String
  tagId       String
  highlight   Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([highlightId, tagId])
  @@index([highlightId])
  @@index([tagId])
}

model Book {
  id              String      @id @default(uuid())
  userId          String
  title           String      @db.VarChar(255)
  author          String      @db.VarChar(255)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  highlightsCount Int         @default(0)
  commentsCount   Int         @default(0)
  bookmarksCount  Int         @default(0)
  isbn13          String?     @unique @db.VarChar(13)
  isbn10          String?     @unique @db.VarChar(10)
  googleBooksId   String?     @unique @db.VarChar(255)
  imageUrl        String?     @db.VarChar(255)
  subtitle        String?     @db.VarChar(255)
  publishedDate   String?     @db.VarChar(10)
  pageCount       Int?
  description     String?
  categories      String[]    @default([])
  textSnippet     String?
  googleBooksLink String?     @db.VarChar(255)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  highlights      Highlight[]

  @@index([userId], map: "book_user_idx")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique @db.VarChar(255)
  supabaseId String      @unique @db.VarChar(255)
  name       String?     @db.VarChar(255)
  image      String?     @db.VarChar(255)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  books      Book[]
  highlights Highlight[]
}
